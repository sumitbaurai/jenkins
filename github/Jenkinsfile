def logSeparator = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
def result = ''
def sshUrlToRepo = ''
def httpUrlToRepo = ''
def environments = ['TEST','UAT','PROD']
def accessToken = ''
def isApiPublished= false

def abort(String message)
{
    echo "Aborting pipeline..."
    currentBuild.result = 'ABORTED'
    error(message)
}

def log(String message)
{
    echo "++++++++++++++++++++++++++ [ ${message} ]"
}


pipeline {
    agent any
    parameters {
      string   name: 'applicationName',  trim: true, description: 'Application Name. This field is required.'
    }
    environment {
        GITHUB_TOKEN = credentials('github_admin_token')
        GITHUB_REPOS_URL = "https://api.github.com/sumitbaurai/repos"
    }
    stages {
        stage('Setup'){
            steps {
                script{
                    if (params.applicationName.trim() == '') { abort("Pipeline parameter 'applicationName' cannot be blank.") }
                    currentBuild.displayName = "${applicationName}"
                    currentBuild.description = "Creating ${applicationName} Repo"
                }
			}
        }
        
        stage('Create GitHub repository') {
            steps {
                script {  
                    def createRepoRequest = """
                    {
                        \"name\": \"${params.applicationName.trim()}\",
                        \"description\": \"${params.applicationName.trim()}\",
                        \"homepage\": \"https://github.com\",
                        \"private\": true
                    }
                    """

                    def createRepoResponse = httpRequest (
                        httpMode: "POST",
                        url: GITHUB_REPOS_URL,
                        requestBody: createRepoRequest,
                        quiet: false,
                        customHeaders:[[name:'Authorization', value:"token ${GITHUB_TOKEN}"]]
                    )

                    def responseMap = new groovy.json.JsonSlurperClassic().parseText(createRepoResponse.content)
                    sshUrlToRepo = responseMap.ssh_url
                    httpUrlToRepo = responseMap.url
                    log("Repository (${sshUrlToRepo}) created")

                }
            }
        }
    }
    post { 
        always { 
            cleanWs()
        }
    }
}
